import pickle
import numpy as np
import pymc3 as pm
import matplotlib.pyplot as plt
from scipy import stats

left_quick = [115.0205078125, 117.0205078125, 124.0205078125, 94.0205078125, 78.0205078125, 89.0205078125, 67.0205078125, 110.0205078125, 96.0205078125, 105.0205078125, 108.0205078125, 129.0205078125, 107.0205078125, 116.0205078125, 112.0205078125, 112.0205078125, 94.0205078125, 80.0205078125, 119.0205078125, 84.0205078125, 80.0205078125, 93.0205078125, 90.0205078125, 85.0205078125, 104.0205078125, 124.0205078125, 172.0205078125, 106.0205078125, 98.0205078125, 96.0205078125, 94.0205078125, 97.0205078125, 99.0205078125, 106.0205078125, 99.0205078125, 103.0205078125, 103.0205078125, 96.0205078125, 93.0205078125, 83.0205078125, 79.0205078125, 92.0205078125, 108.0205078125, 118.0205078125, 100.0205078125, 102.0205078125, 104.0205078125, 95.0205078125, 119.0205078125, 97.0205078125, 76.0205078125, 106.0205078125, 85.0205078125, 91.0205078125, 82.0205078125, 103.0205078125, 97.0205078125, 111.0205078125, 111.0205078125, 100.0205078125, 172.0205078125, 85.0205078125, 94.0205078125, 128.0205078125, 97.0205078125, 114.0205078125, 94.0205078125, 81.0205078125, 140.0205078125, 115.0205078125, 120.0205078125, 94.0205078125, 88.0205078125, 86.0205078125, 117.0205078125, 82.0205078125, 115.0205078125, 102.0205078125, 128.0205078125, 106.0205078125, 123.0205078125, 107.0205078125, 113.0205078125, 95.0205078125, 67.0205078125, 96.0205078125, 131.0205078125, 97.0205078125, 94.0205078125, 120.0205078125, 68.0205078125, 59.0205078125, 73.0205078125, 116.0205078125, 81.0205078125, 97.0205078125, 94.0205078125, 113.0205078125, 114.0205078125, 86.0205078125, 109.0205078125, 109.0205078125, 105.0205078125, 117.0205078125, 106.0205078125, 93.0205078125, 109.0205078125, 116.0205078125, 62.0205078125, 92.0205078125, 119.0205078125, 126.0205078125, 124.0205078125, 116.0205078125, 86.0205078125, 98.0205078125, 98.0205078125, 92.0205078125, 102.0205078125, 94.0205078125]
right_quick = [129.0205078125, 151.0205078125, 136.0205078125, 149.0205078125, 151.0205078125, 145.0205078125, 63.0205078125, 72.0205078125, 132.0205078125, 139.0205078125, 167.0205078125, 178.0205078125, 82.0205078125, 90.0205078125, 244.0205078125, 16.0205078125, 119.0205078125, 124.0205078125, 145.0205078125, 168.0205078125, 162.0205078125, 142.0205078125, 120.0205078125, 139.0205078125, 117.0205078125, 120.0205078125, 143.0205078125, 111.0205078125, 145.0205078125, 102.0205078125, 102.0205078125, 68.0205078125, 122.0205078125, 138.0205078125, 141.0205078125, 128.0205078125, 146.0205078125, 129.0205078125, 130.0205078125, 108.0205078125, 82.0205078125, 126.0205078125, 155.0205078125, 120.0205078125, 108.0205078125, 158.0205078125, 118.0205078125, 148.0205078125, 175.0205078125, 212.0205078125, 139.0205078125, 110.0205078125, 142.0205078125, 151.0205078125, 151.0205078125, 162.0205078125, 146.0205078125, 130.0205078125, 143.0205078125, 128.0205078125, 118.0205078125, 152.0205078125, 137.0205078125, 166.0205078125, 130.0205078125, 128.0205078125, 159.0205078125, 140.0205078125, 146.0205078125, 157.0205078125, 184.0205078125, 155.0205078125, 83.0205078125, 118.0205078125, 115.0205078125, 99.0205078125, 72.0205078125, 134.0205078125, 141.0205078125, 138.0205078125, 142.0205078125, 90.0205078125, 118.0205078125, 124.0205078125, 100.0205078125, 159.0205078125, 102.0205078125, 139.0205078125, 125.0205078125, 106.0205078125, 109.0205078125, 108.0205078125, 190.0205078125, 156.0205078125, 122.0205078125, 183.0205078125, 109.0205078125, 173.0205078125, 114.0205078125, 148.0205078125, 71.0205078125, 173.0205078125, 147.0205078125, 190.0205078125, 139.0205078125, 160.0205078125, 146.0205078125, 170.0205078125, 171.0205078125, 175.0205078125, 113.0205078125, 123.0205078125, 186.0205078125, 132.0205078125, 140.0205078125, 152.0205078125, 126.0205078125, 152.0205078125, 152.0205078125, 183.0205078125, 181.0205078125, 168.0205078125, 115.0205078125, 132.0205078125, 153.0205078125, 143.0205078125, 134.0205078125, 128.0205078125, 121.0205078125, 177.0205078125, 182.0205078125, 187.0205078125, 194.0205078125, 120.0205078125, 119.0205078125, 118.0205078125, 137.0205078125, 120.0205078125, 115.0205078125, 139.0205078125, 205.0205078125, 178.0205078125, 133.0205078125, 106.0205078125, 141.0205078125, 115.0205078125, 120.0205078125]
left_slow = [116.0205078125, 76.0205078125, 94.0205078125, 109.0205078125, 82.0205078125, 84.0205078125, 59.0205078125, 75.0205078125, 70.0205078125, 65.0205078125, 78.0205078125, 69.0205078125, 64.0205078125, 54.0205078125, 82.0205078125, 72.0205078125, 78.0205078125, 58.0205078125, 75.0205078125, 50.0205078125, 75.0205078125, 62.0205078125, 91.0205078125, 82.0205078125, 77.0205078125, 70.0205078125, 68.0205078125, 59.0205078125, 86.0205078125, 65.0205078125, 71.0205078125, 64.0205078125, 87.0205078125, 89.0205078125, 95.0205078125, 88.0205078125, 91.0205078125, 66.0205078125, 62.0205078125, 250.0205078125, 95.0205078125, 82.0205078125, 183.0205078125, 90.0205078125, 69.0205078125, 65.0205078125, 97.0205078125, 71.0205078125, 75.0205078125, 60.0205078125, 78.0205078125, 88.0205078125, 82.0205078125, 80.0205078125, 76.0205078125, 75.0205078125, 118.0205078125, 88.0205078125, 95.0205078125, 111.0205078125, 103.0205078125, 81.0205078125, 95.0205078125, 99.0205078125, 120.0205078125, 105.0205078125, 68.0205078125, 88.0205078125, 124.0205078125, 120.0205078125, 91.0205078125, 94.0205078125, 88.0205078125, 96.0205078125, 103.0205078125, 88.0205078125, 114.0205078125, 141.0205078125, 87.0205078125, 101.0205078125, 98.0205078125, 78.0205078125, 99.0205078125, 65.0205078125, 107.0205078125, 93.0205078125, 89.0205078125, 115.0205078125, 90.0205078125, 108.0205078125, 89.0205078125, 88.0205078125, 121.0205078125, 115.0205078125, 123.0205078125, 149.0205078125, 105.0205078125, 111.0205078125, 99.0205078125, 176.0205078125, 172.0205078125, 111.0205078125, 111.0205078125, 107.0205078125, 90.0205078125, 191.0205078125, 125.0205078125, 97.0205078125, 97.0205078125, 94.0205078125, 125.0205078125, 134.0205078125, 94.0205078125, 104.0205078125, 72.0205078125, 109.0205078125, 105.0205078125, 96.0205078125, 98.0205078125, 110.0205078125, 86.0205078125, 80.0205078125, 69.0205078125, 117.0205078125, 112.0205078125, 83.0205078125, 122.0205078125, 73.0205078125, 84.0205078125, 101.0205078125, 105.0205078125, 82.0205078125, 30.0205078125, 102.0205078125, 158.0205078125, 90.0205078125, 65.0205078125, 106.0205078125, 82.0205078125, 95.0205078125, 133.0205078125, 77.0205078125, 70.0205078125, 133.0205078125, 69.0205078125, 117.0205078125, 92.0205078125, 62.0205078125, 79.0205078125, 107.0205078125, 133.0205078125, 104.0205078125, 110.0205078125, 117.0205078125, 60.0205078125, 71.0205078125, 113.0205078125, 109.0205078125, 99.0205078125, 114.0205078125, 70.0205078125, 83.0205078125, 68.0205078125, 113.0205078125, 84.0205078125, 92.0205078125, 132.0205078125, 71.0205078125, 102.0205078125, 74.0205078125, 144.0205078125, 97.0205078125, 100.0205078125, 81.0205078125, 94.0205078125, 105.0205078125, 97.0205078125, 120.0205078125, 128.0205078125, 154.0205078125, 98.0205078125, 119.0205078125, 70.0205078125, 98.0205078125]
right_slow = [89.0205078125, 180.0205078125, 145.0205078125, 168.0205078125, 143.0205078125, 165.0205078125, 165.0205078125, 85.0205078125, 182.0205078125, 75.0205078125, 68.0205078125, 80.0205078125, 130.0205078125, 124.0205078125, 147.0205078125, 97.0205078125, 148.0205078125, 66.0205078125, 166.0205078125, 120.0205078125, 97.0205078125, 156.0205078125, 155.0205078125, 146.0205078125, 140.0205078125, 106.0205078125, 145.0205078125, 86.0205078125, 145.0205078125, 129.0205078125, 135.0205078125, 81.0205078125, 142.0205078125, 121.0205078125, 114.0205078125, 126.0205078125, 138.0205078125, 124.0205078125, 90.0205078125, 119.0205078125, 155.0205078125, 226.0205078125, 98.0205078125, 85.0205078125, 92.0205078125, 174.0205078125, 113.0205078125, 134.0205078125, 160.0205078125, 119.0205078125, 161.0205078125, 146.0205078125, 119.0205078125, 147.0205078125, 114.0205078125, 104.0205078125, 93.0205078125, 148.0205078125, 144.0205078125, 112.0205078125, 120.0205078125, 112.0205078125, 82.0205078125, 149.0205078125, 111.0205078125, 100.0205078125, 144.0205078125, 164.0205078125, 108.0205078125, 124.0205078125, 120.0205078125, 89.0205078125, 72.0205078125, 177.0205078125, 113.0205078125, 80.0205078125, 118.0205078125, 95.0205078125, 81.0205078125, 197.0205078125, 143.0205078125, 49.0205078125, 143.0205078125, 112.0205078125, 140.0205078125, 128.0205078125, 166.0205078125, 177.0205078125, 125.0205078125, 131.0205078125, 158.0205078125, 76.0205078125, 168.0205078125, 132.0205078125, 109.0205078125, 133.0205078125, 129.0205078125, 162.0205078125, 108.0205078125, 135.0205078125, 140.0205078125, 79.0205078125, 147.0205078125, 125.0205078125, 123.0205078125, 132.0205078125, 150.0205078125, 116.0205078125, 166.0205078125, 195.0205078125, 74.0205078125, 164.0205078125, 139.0205078125, 119.0205078125, 142.0205078125, 132.0205078125, 100.0205078125, 116.0205078125, 129.0205078125, 158.0205078125, 130.0205078125, 138.0205078125, 149.0205078125, 148.0205078125, 156.0205078125]


distributions = {
	'normal': pm.Normal,
	'beta': pm.Beta,
	'exponential': pm.Exponential,
}

def fit_posterior(prior, data, posterior_trace_file, n_samples=2000, n_tuning_samples=1000, n_chains=8):

	with pm.Model() as model:

		μ_left = distributions[prior['μ_left'][0]]('μ_left', *prior['μ_left'][1])
		σ_left = distributions[prior['σ_left'][0]]('σ_left', *prior['σ_left'][1])
		pm.Normal('likelihood_left', mu=μ_left, sigma=σ_left, observed=data[0])

		μ_right = distributions[prior['μ_right'][0]]('μ_right', *prior['μ_right'][1])
		σ_right = distributions[prior['σ_right'][0]]('σ_right', *prior['σ_right'][1])
		pm.Normal('likelihood_right', mu=μ_right, sigma=σ_right, observed=data[1])

		diff_in_means = pm.Deterministic('difference in μ', μ_right - μ_left)
		diff_in_stds = pm.Deterministic('difference in σ', σ_right - σ_left)

		prior_checks = pm.sample_prior_predictive(samples=100)
		return prior_checks

		# trace = pm.sample(n_samples, tune=n_tuning_samples, chains=n_chains,
		# 	cores=1, return_inferencedata=True
		# )

	# with open(posterior_trace_file, 'wb') as file:
		# pickle.dump((trace, prior, None), file)



prior = {
	'μ_left': ('normal', (72, 20)),
	'σ_left': ('normal', (10, 1)),
	'μ_right': ('normal', (144, 20)),
	'σ_right': ('normal', (20, 1)),
}
data_left = np.array(left_slow + left_quick)
data_right = np.array(right_slow + right_quick)

n_subjects = 20

prior_checks = fit_posterior(prior, (data_left, data_right), '../data/model_fit/pilot3_posterior_all.pkl')

for mu, sigma in zip(prior_checks['μ_left'], prior_checks['σ_left']):
	samples = np.random.normal(mu, sigma, n_subjects*64)
	x = np.linspace(0, 252, 1000)
	y = stats.gaussian_kde(samples).pdf(x)
	plt.plot(x, y, color='cadetblue', alpha=0.5)

for mu, sigma in zip(prior_checks['μ_right'], prior_checks['σ_right']):
	samples = np.random.normal(mu, sigma, n_subjects*64)
	x = np.linspace(0, 252, 1000)
	y = stats.gaussian_kde(samples).pdf(x)
	plt.plot(x, y, color='crimson', alpha=0.5)

# x = np.linspace(-200, 200, 1000)
# y = stats.gaussian_kde(prior_checks['difference in μ']).pdf(x)
# plt.plot(x, y, color='black')
plt.show()

quit()

# import arviz as az
# import matplotlib.pyplot as plt
# with open('../data/model_fit/pilot3_posterior_all.pkl', 'rb') as file:
# 	trace, prior, bounds = pickle.load(file)
# az.plot_posterior(
# 	trace,
# 	var_names=['μ_left', 'μ_right', 'σ_left', 'σ_right', 'difference in μ', 'difference in σ'],
# 	color='#87ceeb',
# )
# plt.show()
# print(az.summary(trace, hdi_prob=0.95, kind='stats'))
# quit()


import arviz as az
import core

distributions = {
	'normal': stats.norm,
	'beta': stats.beta,
	'exponential': lambda lam: stats.expon(scale=1/lam),
}

def plot_prior(axis, prior, bounds, color):
	x = np.linspace(*bounds, 1000)
	kind, params = prior
	y = distributions[kind](*params).pdf(x)
	axis.plot(x, y, color=color, linewidth=0.5, linestyle='--')
	axis.set_xlim(*bounds)
	axis.set_yticks([])
	axis.spines['top'].set_visible(False)
	axis.spines['right'].set_visible(False)
	axis.spines['left'].set_visible(False)

def plot(axis, trace, param_name, bounds, color):
	mcmc_draws = trace.posterior.data_vars[param_name].to_numpy().flatten()
	x = np.linspace(*bounds, 1000)
	posterior = stats.gaussian_kde(mcmc_draws).pdf(x)
	axis.plot(x, posterior, color=color, linewidth=0.5)
	axis.set_xlim(*bounds)
	axis.set_yticks([])
	axis.spines['top'].set_visible(False)
	axis.spines['right'].set_visible(False)
	axis.spines['left'].set_visible(False)

with open('../data/model_fit/pilot3_posterior_all.pkl', 'rb') as file:
	trace, prior, bounds = pickle.load(file)

print(prior)

with core.Figure('../visuals/pilot3_posterior_all2.pdf', 4, 2, width='double', height=3) as fig:

	plot_prior(fig[0,0], prior['μ_left'], (0, 252), 'cadetblue')
	plot(fig[0,0], trace, 'μ_left', (0, 252), 'cadetblue')
	plot_prior(fig[0,0], prior['μ_right'], (0, 252), 'crimson')
	plot(fig[0,0], trace, 'μ_right', (0, 252), 'crimson')
	fig[0,0].set_xticks([i*36 for i in range(8)])
	# fig[0,0].set_xticks([72, 108, 144, 180])
	fig[0,0].set_xlabel('Mean of targetted position')
	mn, mx = fig[0,0].get_ylim()
	fig[0,0].plot([252//2]*2, [mn, mx], color='black', linewidth=1)
	fig[0,0].set_ylim(mn, mx)

	plot_prior(fig[0,1], prior['σ_left'], (0, 60), 'cadetblue')
	plot(fig[0,1], trace, 'σ_left', (0, 60), 'cadetblue')
	plot_prior(fig[0,1], prior['σ_right'], (0, 60), 'crimson')
	plot(fig[0,1], trace, 'σ_right', (0, 60), 'crimson')
	fig[0,1].set_xlabel('SD of targetted position')

	plot(fig[1,0], trace, 'difference in μ', (-10, 50), 'black')
	fig[1,0].set_xlabel('Difference in means')

	plot(fig[1,1], trace, 'difference in σ', (-10, 50), 'black')
	fig[1,1].set_xlabel('Difference in SDs')





	

